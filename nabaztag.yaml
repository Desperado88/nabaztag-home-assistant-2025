# =========================
# Nabaztag - Variables
# =========================
sensor:
  - platform: rest
    name: Bitcoin Exchange Rate
    resource: https://api.coinbase.com/v2/exchange-rates?currency=BTC
    value_template: "{{ value_json.data.rates.EUR | float }}"
    unit_of_measurement: "EUR"
    scan_interval: 300
    icon: mdi:currency-btc

input_text:
  nabaztag_ip_address:
    name: "Adresse IP Nabaztag"
    initial: !secret nabaztag_ip

  nabaztag_message:
    name: "Message à dire"
    initial: "Bonjour, je m'appelle Nabaztag"
    max: 255
  # Configuration
  nabaztag_latitude:
    name: "Latitude"
    initial: !secret latitude
  nabaztag_longitude:
    name: "Longitude"
    initial: !secret longitude

input_select:
  nabaztag_ear_position:
    name: "Position des oreilles"
    options: ["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16"]
    initial: "5"

  nabaztag_nose_state:
    name: "État du nez"
    options: ["off","on","todo","urgent","panic"]
    initial: "off"

  nabaztag_weather:
    name: "Météo"
    options: ["soleil","nuages","brouillard","pluie","neige","orage","auto"]
    initial: "auto"

  nabaztag_traffic:
    name: "Trafic"
    options: ["libre","correct","modéré","normal","dense","congestionné","extrême"]
    initial: "normal"

  nabaztag_stock:
    name: "Bourse"
    options: ["---","--","-","0","+","++","+++"]
    initial: "0"

  # Configuration
  nabaztag_language:
    name: "Langue"
    options:
      - "fr"
      - "en"
      - "es"
      - "de"
      - "it"
    initial: "fr"

  nabaztag_timezone_city:
    name: "Ville/Timezone"
    options:
      - "Europe/Paris"
      - "Europe/London"
      - "America/New_York"
      - "Asia/Tokyo"
    initial: "Europe/Paris"

  # Bitcoin
  nabaztag_stocks:
    name: Stocks Display
    options:
      - "Off"
      - "Bitcoin"
      - "All"
    initial: "Off"
    icon: mdi:chart-line

input_number:
  nabaztag_pollution:
    name: "Pollution"
    min: 0
    max: 10
    step: 1
    mode: slider
    initial: 3

  # Configuration
  nabaztag_wake_hour:
    name: "Heure de réveil"
    min: 0
    max: 23
    step: 1
    initial: 7

  nabaztag_sleep_hour:
    name: "Heure de coucher"
    min: 0
    max: 23
    step: 1
    initial: 23

  # Bitcoin
  bitcoin_previous_exchange_rate:
    name: Previous Bitcoin Exchange Rate
    initial: 0
    min: 0
    max: 500000
    step: 0.01
    mode: box
    icon: mdi:currency-btc

  bitcoin_value_difference:
    name: Bitcoin Value Difference
    initial: 0
    min: -100000
    max: 500000
    step: 0.01
    mode: box
    icon: mdi:currency-btc

  # Configuration
input_boolean:
  nabaztag_daylight_saving:
    name: "Heure d'été"
    initial: off

  nabaztaglife:
    name: "Nabaztag Life"
    initial: on
    icon: mdi:rabbit

# =========================
# Nabaztag - Scripts
# =========================
script:
  # Oreilles
  nabaztag_move_left_ear:
    alias: "Nabaztag - Oreille gauche"
    sequence:
      - action: rest_command.nabaztag_left_ear
        data:
          position: "{{ states('input_select.nabaztag_ear_position') }}"

  nabaztag_move_right_ear:
    alias: "Nabaztag - Oreille droite"
    sequence:
      - action: rest_command.nabaztag_right_ear
        data:
          position: "{{ states('input_select.nabaztag_ear_position') }}"

  nabaztag_move_both_ears:
    alias: "Nabaztag - Les deux oreilles"
    sequence:
      - action: rest_command.nabaztag_left_ear
        data:
          position: "{{ states('input_select.nabaztag_ear_position') }}"
      - delay: "00:00:01"
      - action: rest_command.nabaztag_right_ear
        data:
          position: "{{ states('input_select.nabaztag_ear_position') }}"

  # Nez
  nabaztag_set_nose:
    alias: "Nabaztag - État du nez"
    sequence:
      - action: rest_command.nabaztag_nose
        data:
          state: >
            {% set s = states('input_select.nabaztag_nose_state') %}
            {% if s == 'off' %}0{% elif s == 'on' %}1{% elif s == 'todo' %}2{% elif s == 'urgent' %}3{% elif s == 'panic' %}4{% endif %}

  # Météo
  nabaztag_set_weather:
    alias: "Nabaztag - Météo"
    sequence:
      - condition: state
        entity_id: input_boolean.nabaztaglife
        state: "on"
      - action: rest_command.nabaztag_weather
        data:
          weather: >
            {% set w = states('input_select.nabaztag_weather') %}
            {% if w == 'soleil' %}
              0
            {% elif w == 'nuages' %}
              1
            {% elif w == 'brouillard' %}
              2
            {% elif w == 'pluie' %}
              3
            {% elif w == 'neige' %}
              4
            {% elif w == 'orage' %}
              5
            {% elif w == 'auto' %}
              {% set current = states('weather.forecast_maison') %}
              {% if current in ['sunny','clear'] %}0
              {% elif current in ['cloudy','partlycloudy','overcast'] %}1
              {% elif current == 'fog' %}2
              {% elif current in ['rainy','pouring'] %}3
              {% elif current in ['snowy','snowy-rainy'] %}4
              {% elif current in ['lightning','lightning-rainy'] %}5
              {% else %}1
              {% endif %}
            {% endif %}

  # Trafic
  nabaztag_set_traffic:
    alias: "Nabaztag - Trafic"
    sequence:
      - action: rest_command.nabaztag_traffic
        data:
          traffic: >
            {% set t = states('input_select.nabaztag_traffic') %}
            {% if t == 'libre' %}0{% elif t == 'correct' %}1{% elif t == 'modéré' %}2{% elif t == 'normal' %}3{% elif t == 'dense' %}4{% elif t == 'congestionné' %}5{% elif t == 'extrême' %}6{% endif %}

  # Pollution
  nabaztag_set_pollution:
    alias: "Nabaztag - Pollution"
    sequence:
      - action: rest_command.nabaztag_pollution
        data:
          pollution: "{{ states('input_number.nabaztag_pollution') | int }}"

  # Bourse
  nabaztag_set_stock:
    alias: "Nabaztag - Bourse"
    sequence:
      - action: rest_command.nabaztag_stock
        data:
          stock: >
            {% set s = states('input_select.nabaztag_stock') %}
            {% if s == '---' %}0{% elif s == '--' %}1{% elif s == '-' %}2{% elif s == '0' %}3{% elif s == '+' %}4{% elif s == '++' %}5{% elif s == '+++' %}6{% endif %}

  # Parole
  nabaztag_talk:
    alias: "Nabaztag - Parler"
    sequence:
      - action: rest_command.nabaztag_say
        data:
          message: "{{ states('input_text.nabaztag_message') }}"

  # Sons
  nabaztag_ack:
    alias: "Nabaztag - Son Ack"
    sequence:
      - action: rest_command.nabaztag_ack

  nabaztag_abort:
    alias: "Nabaztag - Son Abort"
    sequence:
      - action: rest_command.nabaztag_abort

  nabaztag_communication:
    alias: "Nabaztag - Son Communication"
    sequence:
      - action: rest_command.nabaztag_communication

  nabaztag_ministop:
    alias: "Nabaztag - Son Ministop"
    sequence:
      - action: rest_command.nabaztag_ministop

  # Taichi
  nabaztag_taichi_stop:
    alias: "Nabaztag - Taichi Stop"
    sequence:
      - action: rest_command.nabaztag_taichi
        data:
          level: "0"

  nabaztag_taichi_min:
    alias: "Nabaztag - Taichi Min"
    sequence:
      - action: rest_command.nabaztag_taichi
        data:
          level: "40"
      - delay: "00:00:05"
      - action: rest_command.nabaztag_taichi
        data:
          level: 1000

  nabaztag_taichi_medium:
    alias: "Nabaztag - Taichi Moyen"
    sequence:
      - action: rest_command.nabaztag_taichi
        data:
          level: "80"
      - delay: "00:00:05"
      - action: rest_command.nabaztag_taichi
        data:
          level: 1000

  nabaztag_taichi_max:
    alias: "Nabaztag - Taichi Max"
    sequence:
      - action: rest_command.nabaztag_taichi
        data:
          level: "255"
      - delay: "00:00:05"
      - action: rest_command.nabaztag_taichi
        data:
          level: 1000

  # Configuration
  nabaztag_apply_setup:
    alias: "Nabaztag - Appliquer Setup"
    sequence:
      - action: rest_command.nabaztag_setup
      - action: persistent_notification.create
        metadata: {}
        data:
          message: Configuration envoyée avec succès


  # Réveil et endormissement
  nabaztag_wake_up:
    alias: "Nabaztag - Réveil"
    sequence:
      - action: rest_command.nabaztag_wakeup
      - delay: "00:00:02"
      - action: input_boolean.turn_on
        target:
          entity_id: input_boolean.nabaztaglife
      - action: rest_command.nabaztag_taichi
        data:
          level: "255"
      - delay: "00:00:03"
      - action: rest_command.nabaztag_left_ear
        data:
          position: "8"
      - action: rest_command.nabaztag_right_ear
        data:
          position: "8"
      - delay: "00:00:01"
      - action: rest_command.nabaztag_say
        data:
          message: "Bonjour ! Je me raiveille pour une nouvelle journer !"

  nabaztag_go_to_sleep:
    alias: "Nabaztag - Endormissement"
    sequence:
      - action: rest_command.nabaztag_say
        data:
          message: "Bonne soirer ! Je vais me reposer maintenant."
      - delay: "00:00:03"
      - action: rest_command.nabaztag_taichi
        data:
          level: "100"
      - delay: "00:00:02"
      - action: rest_command.nabaztag_left_ear
        data:
          position: "0"
      - action: rest_command.nabaztag_right_ear
        data:
          position: "0"
      - action: rest_command.nabaztag_nose
        data:
          state: "0"
      - delay: "00:00:02"
      - action: rest_command.nabaztag_sleep
      - action: input_boolean.turn_off
        target:
          entity_id: input_boolean.nabaztaglife

  nabaztag_random_surprise:
    alias: "Nabaztag - Surprise aléatoire"
    sequence:
      - variables:
          random_mood: "{{ range(1, 306) | random }}"
      - action: rest_command.nabaztag_surprise
        data:
          moods: "{{ random_mood }}"
          
# =========================
# Nabaztag - Rest Commands
# =========================
rest_command:
  nabaztag_wakeup:
    url: "http://{{ states('input_text.nabaztag_ip_address') }}/wakeup"
    method: get
    timeout: 30

  nabaztag_sleep:
    url: "http://{{ states('input_text.nabaztag_ip_address') }}/sleep"
    method: get
    timeout: 30

  nabaztag_say:
    url: "http://{{ states('input_text.nabaztag_ip_address') }}/say?t={{ message | urlencode }}"
    method: get
    timeout: 30

  nabaztag_left_ear:
    url: "http://{{ states('input_text.nabaztag_ip_address') }}/left?p={{ position }}&d=0"
    method: get
    timeout: 10

  nabaztag_right_ear:
    url: "http://{{ states('input_text.nabaztag_ip_address') }}/right?p={{ position }}&d=0"
    method: get
    timeout: 10

  nabaztag_nose:
    url: "http://{{ states('input_text.nabaztag_ip_address') }}/nose?v={{ state }}"
    method: get
    timeout: 10

  nabaztag_weather:
    url: "http://{{ states('input_text.nabaztag_ip_address') }}/weather?v={{ weather }}"
    method: get
    timeout: 10

  nabaztag_traffic:
    url: "http://{{ states('input_text.nabaztag_ip_address') }}/traffic?v={{ traffic }}"
    method: get
    timeout: 10

  nabaztag_pollution:
    url: "http://{{ states('input_text.nabaztag_ip_address') }}/pollution?v={{ pollution }}"
    method: get
    timeout: 10

  nabaztag_stock:
    url: "http://{{ states('input_text.nabaztag_ip_address') }}/stock?v={{ stock }}"
    method: get
    timeout: 10

  # Sons
  nabaztag_ack:
    url: "http://{{ states('input_text.nabaztag_ip_address') }}/ack"
    method: get
    timeout: 10

  nabaztag_abort:
    url: "http://{{ states('input_text.nabaztag_ip_address') }}/abort"
    method: get
    timeout: 10

  nabaztag_communication:
    url: "http://{{ states('input_text.nabaztag_ip_address') }}/communication"
    method: get
    timeout: 10

  nabaztag_ministop:
    url: "http://{{ states('input_text.nabaztag_ip_address') }}/ministop"
    method: get
    timeout: 10

  # Taichi
  nabaztag_taichi:
    url: "http://{{ states('input_text.nabaztag_ip_address') }}/taichi?v={{ level }}"
    method: get
    timeout: 10

# Configuration
  nabaztag_setup:
    url: >-
      http://{{ states('input_text.nabaztag_ip_address') }}/setup
      ?j={{ states('input_text.nabaztag_latitude') }}
      &k={{ states('input_text.nabaztag_longitude') }}
      &l={{ states('input_select.nabaztag_language') }}
      &c={{
        {
          "Paris": "PAR",
          "Londres": "LON",
          "New York": "NYC",
          "Tokyo": "TYO"
        }[states('input_select.nabaztag_timezone_city')]|default("PAR")
      }}
      &d={{ 1 if is_state('input_boolean.nabaztag_daylight_saving', 'on') else 0 }}
      &w={{ states('input_number.nabaztag_wake_hour') }}
      &b={{ states('input_number.nabaztag_sleep_hour') }}
    method: get
    timeout: 30

  nabaztag_surprise:
    url: "http://{{ states('input_text.nabaztag_ip_address') }}/surprise?v={{ moods }}"
    method: get
    timeout: 10

# =========================
# Nabaztag - Automatisations
# =========================
automation:
  # Réveil automatique - Utilise un trigger time_pattern pour vérifier l'heure
  - id: nabaztag_auto_wakeup
    alias: "Nabaztag - Réveil automatique"
    trigger:
      - trigger: time_pattern
        minutes: 0
        seconds: 0
    condition:
      - condition: template
        value_template: "{{ now().hour == states('input_number.nabaztag_wake_hour') | int }}"
    action:
      - action: script.nabaztag_wake_up

  # Endormissement automatique - Utilise un trigger time_pattern pour vérifier l'heure
  - id: nabaztag_auto_sleep
    alias: "Nabaztag - Endormissement automatique"
    trigger:
      - trigger: time_pattern
        minutes: 0
        seconds: 0
    condition:
      - condition: template
        value_template: "{{ now().hour == states('input_number.nabaztag_sleep_hour') | int }}"
    action:
      - action: script.nabaztag_go_to_sleep

  # Mettre à jour la météo
  - id: nabaztag_auto_weather_update
    alias: "Nabaztag - Mise à jour météo automatique"
    trigger:
      - trigger: time_pattern
        minutes: "0"  # Toutes les heures
    condition:
      - condition: state
        entity_id: input_boolean.nabaztaglife
        state: "on"
      - condition: template
        value_template: "{{ states('input_select.nabaztag_weather') == 'auto' }}"
    action:
      - action: script.nabaztag_set_weather